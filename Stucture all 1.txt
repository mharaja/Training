**///Define a structure to hold the product sales information, structure will contain the product_ID and total_sales_amount. Write a program that accepts multiple product records (product_ID and total_sales_amount) and prints them in decreasing order of total_sales_amount. In case there are multiple records pertaining to the same product_id, the program should choose a single record containing the highest total_sales_amount.


#include <stdio.h>
#include <stdlib.h>
#include <string.h>
int max(int,int);
int compareBySales(const void *,const  void *);
typedef struct productSales{
    char productId[20];
    int totalSales;
} productSales;
int main() {
    int n;
    int hashArr[10000]={0};
    printf("Enter the number of Entries you want to add\n");
    scanf("%d",&n);
    productSales productsales[n];
    printf("Enter all the Entires: \n");
    for(int i=0;i<n;i++){
        char temp[20];
        scanf("%s",temp);
        char *t = strtok(temp,"-");
        strcpy(productsales[i].productId,t);
        t = strtok(NULL,"-");
        productsales[i].totalSales = atoi(t);
    }
    printf("The Entries are: \n");
    for(int i=0;i<n;i++){
        printf("%s - %d\n",productsales[i].productId,productsales[i].totalSales);
    }
    for (int i = 0; i < n; i++) {
        int digit;
        sscanf(productsales[i].productId, "P%d", &digit);
        hashArr[digit] = max(hashArr[digit],productsales[i].totalSales);
    }
    int count = 0;
    productSales sol[n];
    for (int i = 1001; i < 10000; i++) {
        if(hashArr[i]!=0){
            char str[10];
            sprintf(str,"P%d",i);
            strcpy(sol[count].productId,str);
            sol[count].totalSales = hashArr[i];
            count++;
        }
    }
    printf("The solutions are: \n");
    for(int i=0;i<count;i++){
        printf("%s - %d\n",sol[i].productId,sol[i].totalSales);
    }
    qsort(sol, count, sizeof(productSales), compareBySales); //qsort(arr,size,size of datatype, comparator)
    printf("The solutions after sorting are: \n");
    for(int i=0;i<count;i++){
        printf("%s - %d\n",sol[i].productId,sol[i].totalSales);
    }
    return EXIT_SUCCESS;
}
int max(int a, int b){
    if(a>b){
        return a;
    }else{
        return b;
    }
}
int compareBySales(const void *a, const void *b) {
    const productSales *productA = (const productSales *)a;
    const productSales *productB = (const productSales *)b;
    if (productA->totalSales > productB->totalSales) {
        return -1;
    } else if (productA->totalSales < productB->totalSales) {
        return 1;
    } else {
        return 0;
    }
}
 

////////////////////////////////////////////////////////////////////////////////////////////

***/////The program should print the student ID with the highest average score.

#include<stdio.h>
#include<stdlib.h>
#include<string.h>

int compareAverageMarks(const void *,const void *);

typedef struct Student {
	char student_id[1024];
	double marks;
}Student;



int main(){
	double markHash[2000];
	double countHash[2000];
	memset(markHash,0,2000);
	memset(countHash,0,2000);
	int n;
	printf("Enter size of students\n");
	scanf("%d",&n);
	Student s[n];
	printf("Enter student details\n");
	for(int i=0;i<n;i++){
	char temp[20];
	scanf("%s",temp);
	char* t = strtok(temp,"-");
	strcpy(s[i].student_id,t);
	t = strtok(NULL,"-");
	s[i].marks = atoi(t);
	}

	printf("Printing all students\n");
	for(int i=0;i<n;i++){
	printf("%s - %.2lf\n",s[i].student_id,s[i].marks);
	}

	for(int i=0;i<n;i++){
	int digit;
	sscanf(s[i].student_id,"S%d",&digit);
	markHash[digit] += s[i].marks;
	countHash[digit]++;
	}

	for(int i=1001;i<2000;i++){
	if(markHash[i] != 0){
		double temp  = markHash[i] / countHash[i];
		markHash[i] = temp;
	}
	}

	int count = 0;
    Student sol[n];

    for(int i=1001;i<2000;i++){
    	if(markHash[i] != 0){
		char temp[20];
	sprintf(temp,"S%d",i);
	strcpy(sol[count].student_id,temp);
	sol[count].marks = markHash[i];
	count++;
	}
    }

    qsort(sol,count,sizeof(Student),compareAverageMarks);
printf("\n\n");
printf("Final stduents with avg marks\n");
    for(int i=0;i<count;i++){
        printf("%s - %.2lf\n",sol[i].student_id,sol[i].marks);
    }

return EXIT_SUCCESS;
}

int compareAverageMarks(const void *a, const void *b) {
	const Student *student1 = (const Student *)a;
	const Student *student2 = (const Student *)b;

	if(student1 -> marks > student2 -> marks){
	return -1;
	}else if(student1 -> marks < student2 -> marks){
	return 1;
	}else{
		return 0;
	}
}



////////////////////////////////////////////////////////////////////////////////////


***////Define a structure to hold product inventory information, including the product ID and quantity. Write a program that accepts multiple product records (product_ID and quantity) and prints the total quantity for each product in decreasing order of total quantity. In case there are multiple records for the same product, the program should sum up the quantities.



#include<stdio.h>
#include<stdlib.h>
#include<string.h>

int compareQuantity(const void *,const void *);

typedef struct Product {
	char productid[20];
	int quantity;
}Product;



int main(){
	int quanHash[10000];
	memset(quanHash,0,10000);
	int n;
	printf("Enter size of products\n");
	scanf("%d",&n);
	Product p[n];
	printf("Enter Product details\n");
	for(int i=0;i<n;i++){
	char temp[20];
	scanf("%s",temp);
	char* t = strtok(temp,"-");
	strcpy(p[i].productid,t);
	t = strtok(NULL,"-");
	p[i].quantity = atoi(t);
	}

	printf("Printing all products\n");
	for(int i=0;i<n;i++){
	printf("%s - %d\n",p[i].productid,p[i].quantity);
	}

	for(int i=0;i<n;i++){
	int digit;
	sscanf(p[i].productid,"P%d",&digit);
	quanHash[digit] += p[i].quantity;
	}

	int count = 0;
    Product sol[n];

    for(int i=1001;i<2000;i++){
    	if(quanHash[i] != 0){
		char temp[10];
	sprintf(temp,"P%d",i);
	strcpy(sol[count].productid,temp);
	sol[count].quantity = quanHash[i];
	count++;
	}
    }
    qsort(sol,count,sizeof(Product),compareQuantity);
printf("\n\n");
printf("Final products with final quantity\n");
    for(int i=0;i<count;i++){
        printf("%s - %d\n",sol[i].productid,sol[i].quantity);
    }

return EXIT_SUCCESS;
}


int compareQuantity(const void *a,const void *b){
const Product *p1 = (const Product *)a;
const Product *p2 = (const Product *)b;

if(p1 -> quantity > p2 -> quantity){
return -1;
}else if(p1 -> quantity < p2 -> quantity){
return 1;
}else{
return 0;
}


}








